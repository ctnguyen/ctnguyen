struct DefaultPageConfig{    typedef unsigned int slotID;        /// number of slot    typedef unsigned int pageID;        /// Id of the page in     typedef unsigned int bytearray_size;/// number of byte_array stored in disk    const static char FixedHeaderSize = 200;}struct BaseNode{    virtual size_t getPageSize() const =0;/// Number of Elements in Pages    virtual size_t getPageByteSize() const =0;    virtual size_t getPageMaxSize() const =0; //     virtual size_t getPageMaxByteSize() const =0; // }template< typename TPage, typename TKey>struct InternalNode : public BaseNode{    typedef typename TKey key_type;    typedef typename TPage page_type;    private:    std::list<TKey> mKeyList;    std::list<page::PageID> mPageIDList;        /// get size and cast to optimal type    size_t getPageSize() const    {        return mKeyList.size();    }}template< typename TPage, typename TLeafSlot>struct LeafNode : public BaseNode{    typedef typename TLeafSlot::TKey key_type;    typedef typename TPage page_type;    <typename TKey, typename TDATA>    struct LeafSlot    {        TKey mKey;        TDATA mValue;    }    private:    std::list<LeafSlot> mDataList;        /// get size and cast to optimal type    size_t getPageSize() const    {        return mDataList.size();    }}<typename InternalNode, typename LeafNode>struct BpTree{    /// TODO consistent Key of InternalNode and LeafNode        public :                void insert()        private :}